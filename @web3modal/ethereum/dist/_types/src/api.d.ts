import type { Connector } from '@wagmi/core';
import * as WagmiCore from '@wagmi/core';
import type * as ApiTypes from '../types/apiTypes';
export declare const Web3ModalEthereum: {
    createClient(options: ApiTypes.EthereumOptions): any;
    getDefaultConnectorChainId(connector: Connector): number;
    getConnectorById(id: 'coinbaseWallet' | 'injected' | 'metaMask' | 'walletConnect'): Connector<any, any, any>;
    disconnect(): Promise<void>;
    connectWalletConnect(onUri: (uri: string) => void): Promise<WagmiCore.ConnectResult<WagmiCore.Provider>>;
    connectLinking(onUri: (uri: string) => void): Promise<WagmiCore.ConnectResult<WagmiCore.Provider>>;
    connectCoinbaseMobile(onUri?: ((uri: string) => void) | undefined): Promise<WagmiCore.ConnectResult<WagmiCore.Provider>>;
    connectCoinbaseExtension(): Promise<WagmiCore.ConnectResult<WagmiCore.Provider>>;
    connectMetaMask(): Promise<WagmiCore.ConnectResult<WagmiCore.Provider>>;
    connectInjected(): Promise<WagmiCore.ConnectResult<WagmiCore.Provider>>;
    switchChain(chainId: string): Promise<string>;
    signTypedData({ value, domain, types }: ApiTypes.SignTypedDataOpts): Promise<string>;
    signMessage(message: string): Promise<string>;
    fetchBalance(opts: ApiTypes.GetBalanceOpts): Promise<string>;
    fetchSigner(): Promise<WagmiCore.FetchSignerResult<import("ethers").Signer>>;
    getNetwork(): WagmiCore.GetNetworkResult;
    getContract({ addressOrName, contractInterface, signerOrProvider }: ApiTypes.GetContractOpts): import("ethers").Contract;
    getToken({ address, chainId, formatUnits }: ApiTypes.GetTokenOpts): Promise<WagmiCore.FetchTokenResult>;
    readContract(opts: ApiTypes.ReadContractOpts): Promise<import("@ethersproject/abi").Result>;
    writeContract(opts: ApiTypes.WriteContractOpts): Promise<WagmiCore.SendTransactionResult>;
    prepareWriteContract(opts: ApiTypes.PrepareWriteContractOpts): Promise<WagmiCore.PrepareWriteContractResult<import("ethers").Signer>>;
    watchReadContract(opts: ApiTypes.WatchReadContractOpts): void;
    fetchEnsAddress(opts: ApiTypes.FetchEnsAddressOpts): Promise<string | undefined>;
    fetchEnsAvatar(opts: ApiTypes.FetchEnsAvatarOpts): Promise<string | undefined>;
    fetchEnsName(opts: ApiTypes.FetchEnsNameOpts): Promise<string | undefined>;
    fetchEnsResolver(opts: ApiTypes.FetchEnsAddressOpts): Promise<WagmiCore.FetchEnsResolverResult>;
    fetchTransaction(opts: ApiTypes.FetchTransactionOpts): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    prepareSendTransaction(opts: ApiTypes.PrepareSendTransactionOpts): Promise<WagmiCore.PrepareSendTransactionResult>;
    sendTransaction(opts: ApiTypes.PrepareSendTransactionOpts): Promise<WagmiCore.SendTransactionResult>;
    waitForTransaction(opts: ApiTypes.WaitForTransactionOpts): Promise<import("@ethersproject/abstract-provider").TransactionReceipt>;
};
