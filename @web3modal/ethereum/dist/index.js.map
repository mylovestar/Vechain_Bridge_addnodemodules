{"version":3,"file":"index.js","sources":["../src/utils/helpers.ts","../src/utils/chains.ts","../src/utils/wagmiTools.ts","../src/utils/wagmiHelpers.ts","../src/api.ts"],"sourcesContent":["export const NAMESPACE = 'eip155'\n\nexport function getChainIdReference(chainId: string): number {\n  if (typeof chainId === 'string' && chainId.includes(':')) {\n    const id = Number(chainId.split(':')[1])\n\n    return id\n  }\n\n  throw new Error('Invalid chainId, should be formated as namespace:id')\n}\n\nexport function formatOpts<T>(opts: T & { chainId: string }): T & { chainId: number } {\n  return {\n    ...opts,\n    chainId: getChainIdReference(opts.chainId)\n  }\n}\n","import type { Chain } from '@wagmi/core'\n\n// -- Avalanche ------------------------------------------------------- //\nexport const avalanche: Chain = {\n  id: 43_114,\n  name: 'Avalanche C-Chain',\n  network: 'avalanche',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche',\n    symbol: 'AVAX'\n  },\n  rpcUrls: {\n    default: 'https://api.avax.network/ext/bc/C/rpc'\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace', url: 'https://snowtrace.io' }\n  },\n  testnet: false\n}\n\nexport const avalancheFuji: Chain = {\n  id: 43_113,\n  name: 'Avalanche FUJI C-Chain',\n  network: 'avalancheFuji',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Avalanche',\n    symbol: 'AVAX'\n  },\n  rpcUrls: {\n    default: 'https://api.avax-test.network/ext/bc/C/rpc'\n  },\n  blockExplorers: {\n    default: { name: 'SnowTrace Testnet', url: 'https://testnet.snowtrace.io' }\n  },\n  testnet: true\n}\n\n// -- Binance --------------------------------------------------------- //\nexport const binanceSmartChain: Chain = {\n  id: 56,\n  name: 'Binance Smart Chain',\n  network: 'binanceSmartChain',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Binance',\n    symbol: 'BNB'\n  },\n  rpcUrls: {\n    default: 'https://bsc-dataseed.binance.org'\n  },\n  blockExplorers: {\n    default: { name: 'BSC Scan', url: 'https://bscscan.com' }\n  },\n  testnet: false\n}\n\nexport const binanceSmartChainTestnet: Chain = {\n  id: 97,\n  name: 'Binance Smart Chain Testnet',\n  network: 'binanceSmartChainTestnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Binance',\n    symbol: 'BNB'\n  },\n  rpcUrls: {\n    default: 'https://data-seed-prebsc-1-s1.binance.org:8545'\n  },\n  blockExplorers: {\n    default: { name: 'BSC Scan testnet', url: 'https://testnet.bscscan.com' }\n  },\n  testnet: true\n}\n\n// -- Fantom ---------------------------------------------------------- //\nexport const fantom: Chain = {\n  id: 250,\n  name: 'Fantom Opera',\n  network: 'fantomOpera',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Fantom',\n    symbol: 'FTM'\n  },\n  rpcUrls: {\n    default: 'https://rpc.ankr.com/fantom'\n  },\n  blockExplorers: {\n    default: { name: 'FTM Scan', url: 'https://ftmscan.com' }\n  },\n  testnet: false\n}\n\nexport const fantomTestnet: Chain = {\n  id: 4_002,\n  name: 'Fantom Testnet',\n  network: 'fantomTestnet',\n  nativeCurrency: {\n    decimals: 18,\n    name: 'Fantom',\n    symbol: 'FTM'\n  },\n  rpcUrls: {\n    default: 'https://rpc.testnet.fantom.network'\n  },\n  blockExplorers: {\n    default: { name: 'FTM Scan Testnet', url: 'https://testnet.ftmscan.com' }\n  },\n  testnet: true\n}\n","import { chain, InjectedConnector } from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { MetaMaskConnector } from '@wagmi/core/connectors/metaMask'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { alchemyProvider } from '@wagmi/core/providers/alchemy'\nimport { infuraProvider } from '@wagmi/core/providers/infura'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport { publicProvider } from '@wagmi/core/providers/public'\nimport type { GetDefaultConnectorsOpts, GetWalletConnectProviderOpts } from '../../types/apiTypes'\nimport {\n  avalanche,\n  avalancheFuji,\n  binanceSmartChain,\n  binanceSmartChainTestnet,\n  fantom,\n  fantomTestnet\n} from './chains'\nimport { NAMESPACE } from './helpers'\n\n// -- providers ------------------------------------------------------- //\nfunction walletConnectProvider({ projectId }: GetWalletConnectProviderOpts) {\n  return jsonRpcProvider({\n    rpc: rpcChain => ({\n      http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${rpcChain.id}&projectId=${projectId}`\n    })\n  })\n}\n\nexport const providers = {\n  alchemyProvider,\n  infuraProvider,\n  jsonRpcProvider,\n  publicProvider,\n  walletConnectProvider\n}\n\n// -- chains ---------------------------------------------------------- //\n\nexport const chains = {\n  ...chain,\n  avalanche,\n  fantom,\n  binanceSmartChain,\n  avalancheFuji,\n  fantomTestnet,\n  binanceSmartChainTestnet\n}\n\n// -- connectors ------------------------------------------------------ //\nexport function defaultConnectors({ appName, chains: connectorChains }: GetDefaultConnectorsOpts) {\n  return [\n    new WalletConnectConnector({ chains: connectorChains, options: { qrcode: false } }),\n    new InjectedConnector({ chains: connectorChains, options: { shimDisconnect: true } }),\n    new CoinbaseWalletConnector({\n      chains: connectorChains,\n      options: { appName, headlessMode: true }\n    }),\n    new MetaMaskConnector({ chains: connectorChains })\n  ]\n}\n","import type { Client, ConnectorData } from '@wagmi/core'\nimport { chain as wagmiChain, configureChains, createClient } from '@wagmi/core'\nimport type { State } from '@wagmi/core/dist/declarations/src/client'\nimport { publicProvider } from '@wagmi/core/providers/public'\nimport { AccountCtrl } from '@web3modal/core'\nimport { Buffer } from 'buffer'\nimport type { EthereumOptions } from '../../types/apiTypes'\nimport { NAMESPACE } from './helpers'\nimport { defaultConnectors } from './wagmiTools'\n\n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nif (typeof window !== 'undefined' && !window.Buffer) window.Buffer = Buffer\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nlet client = undefined as Client<any, any> | undefined\n\nexport function getClient() {\n  return client\n}\n\nfunction onConnectorChange(event: ConnectorData) {\n  if (event.account) AccountCtrl.setAddress(event.account)\n  if (event.chain) AccountCtrl.setChain(`${NAMESPACE}:${event.chain.id}`, !event.chain.unsupported)\n}\n\nfunction onConnectorMessage(event: { type: string; data?: unknown }) {\n  // eslint-disable-next-line no-console\n  console.log(event)\n}\n\nfunction onConnectorError(event: Error) {\n  // eslint-disable-next-line no-console\n  console.log(event)\n}\n\nfunction onClientConnected() {\n  const account = getClient()?.data?.account\n  const chain = getClient()?.data?.chain\n  const connector = getClient()?.connector\n  const provider = getClient()?.provider\n  if (account && chain && connector && provider) {\n    connector.on('change', onConnectorChange)\n    connector.on('message', onConnectorMessage)\n    connector.on('error', onConnectorError)\n    AccountCtrl.setAccount({\n      address: account,\n      chainId: `${NAMESPACE}:${chain.id}`,\n      chainSupported: !chain.unsupported,\n      connector: connector.id\n    })\n  }\n}\n\nfunction onClientDisconnected() {\n  getClient()?.connector?.removeAllListeners()\n  AccountCtrl.resetAccount()\n}\n\nfunction onClientChange(state: State, prevState: State) {\n  if (state.status !== prevState.status) {\n    const { status } = state\n    if (status === 'connected') onClientConnected()\n    if (status === 'disconnected') onClientDisconnected()\n  }\n}\n\nexport function initializeClient(options: EthereumOptions) {\n  const configChains = options.chains ?? [wagmiChain.mainnet]\n  const configProviders = options.providers ?? [publicProvider()]\n  const configAutoConnect = options.autoConnect ?? true\n\n  const { chains, provider } = configureChains(configChains, configProviders)\n\n  const wagmiClient = createClient({\n    autoConnect: configAutoConnect,\n    connectors: defaultConnectors({ chains, appName: options.appName }),\n    provider\n  })\n\n  client = wagmiClient\n  getClient()?.subscribe(onClientChange)\n}\n","import type { Connector } from '@wagmi/core'\nimport * as WagmiCore from '@wagmi/core'\nimport { CoreHelpers } from '@web3modal/core'\nimport type * as ApiTypes from '../types/apiTypes'\nimport { formatOpts, getChainIdReference } from './utils/helpers'\nimport { getClient, initializeClient } from './utils/wagmiHelpers'\n\nexport const Web3ModalEthereum = {\n  // -- config ------------------------------------------------------- //\n\n  createClient(options: ApiTypes.EthereumOptions) {\n    initializeClient(options)\n\n    return this\n  },\n\n  // -- chains ----------------------------------------------------- //\n  getDefaultConnectorChainId(connector: Connector) {\n    const chainId = connector.chains[0].id\n\n    return chainId\n  },\n\n  // -- connectors ------------------------------------------------- //\n  getConnectorById(id: 'coinbaseWallet' | 'injected' | 'metaMask' | 'walletConnect') {\n    const connector = getClient()?.connectors.find(item => item.id === id)\n    if (!connector) throw new Error(`Missing ${id} connector`)\n\n    return connector\n  },\n\n  async disconnect() {\n    await WagmiCore.disconnect()\n    CoreHelpers.removeWalletConnectDeepLink()\n  },\n\n  async connectWalletConnect(onUri: (uri: string) => void) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri(provider.connector.uri)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([WagmiCore.connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectLinking(onUri: (uri: string) => void) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            const wcUri: string = provider.connector.uri\n            onUri(encodeURIComponent(wcUri))\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([WagmiCore.connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectCoinbaseMobile(onUri?: (uri: string) => void) {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri?.(provider.qrUrl)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([WagmiCore.connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectCoinbaseExtension() {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await WagmiCore.connect({ connector, chainId })\n\n    return data\n  },\n\n  async connectMetaMask() {\n    const connector = this.getConnectorById('metaMask')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await WagmiCore.connect({ connector, chainId })\n\n    return data\n  },\n\n  async connectInjected() {\n    const connector = this.getConnectorById('injected')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await WagmiCore.connect({ connector, chainId })\n\n    return data\n  },\n\n  // -- actions ----------------------------------------------------- //\n  async switchChain(chainId: string) {\n    const chain = await WagmiCore.switchNetwork({ chainId: getChainIdReference(chainId) })\n\n    return `eip155:${chain.id}`\n  },\n\n  async signTypedData({ value, domain, types }: ApiTypes.SignTypedDataOpts) {\n    const signature = await WagmiCore.signTypedData({ value, domain, types })\n\n    return signature\n  },\n\n  async signMessage(message: string) {\n    const signature = await WagmiCore.signMessage({ message })\n\n    return signature\n  },\n\n  // -- fetch ------------------------------------------------------- //\n  async fetchBalance(opts: ApiTypes.GetBalanceOpts) {\n    const balance = await WagmiCore.fetchBalance(formatOpts(opts))\n\n    return balance.formatted\n  },\n\n  async fetchSigner() {\n    const signer = await WagmiCore.fetchSigner()\n\n    return signer\n  },\n\n  getNetwork() {\n    const network = WagmiCore.getNetwork()\n\n    return network\n  },\n\n  // ----------- contract ----------------------------- //\n\n  getContract({ addressOrName, contractInterface, signerOrProvider }: ApiTypes.GetContractOpts) {\n    const contract = WagmiCore.getContract({ addressOrName, contractInterface, signerOrProvider })\n\n    return contract\n  },\n\n  async getToken({ address, chainId, formatUnits }: ApiTypes.GetTokenOpts) {\n    const token = await WagmiCore.fetchToken({\n      address,\n      chainId: getChainIdReference(chainId),\n      formatUnits\n    })\n\n    return token\n  },\n\n  async readContract(opts: ApiTypes.ReadContractOpts) {\n    const read = await WagmiCore.readContract(formatOpts(opts))\n\n    return read\n  },\n\n  async writeContract(opts: ApiTypes.WriteContractOpts) {\n    const write = await WagmiCore.writeContract(\n      formatOpts({\n        mode: 'prepared',\n        ...opts\n      })\n    )\n\n    return write\n  },\n\n  async prepareWriteContract(opts: ApiTypes.PrepareWriteContractOpts) {\n    const preperation = await WagmiCore.prepareWriteContract(formatOpts(opts))\n\n    return preperation\n  },\n\n  watchReadContract(opts: ApiTypes.WatchReadContractOpts) {\n    const { callback, ...remainingOpts } = opts\n    WagmiCore.watchReadContract(formatOpts(remainingOpts), callback)\n  },\n\n  // ----------- ens ----------------------------- //\n\n  async fetchEnsAddress(opts: ApiTypes.FetchEnsAddressOpts) {\n    const address = await WagmiCore.fetchEnsAddress(formatOpts(opts))\n\n    return address?.toString()\n  },\n\n  async fetchEnsAvatar(opts: ApiTypes.FetchEnsAvatarOpts) {\n    const avatar = await WagmiCore.fetchEnsAvatar(formatOpts(opts))\n\n    return avatar?.toString()\n  },\n\n  async fetchEnsName(opts: ApiTypes.FetchEnsNameOpts) {\n    const name = await WagmiCore.fetchEnsName(formatOpts(opts))\n\n    return name?.toString()\n  },\n\n  async fetchEnsResolver(opts: ApiTypes.FetchEnsAddressOpts) {\n    const resolver = await WagmiCore.fetchEnsResolver(formatOpts(opts))\n\n    return resolver\n  },\n\n  // ----------- transaction ---------------------- //\n\n  async fetchTransaction(opts: ApiTypes.FetchTransactionOpts) {\n    const transaction = await WagmiCore.fetchTransaction(formatOpts(opts))\n\n    return transaction\n  },\n\n  async prepareSendTransaction(opts: ApiTypes.PrepareSendTransactionOpts) {\n    const preparation = await WagmiCore.prepareSendTransaction(formatOpts(opts))\n\n    return preparation\n  },\n\n  async sendTransaction(opts: ApiTypes.PrepareSendTransactionOpts) {\n    const prep = await WagmiCore.prepareSendTransaction(formatOpts(opts))\n    const result = await WagmiCore.sendTransaction({\n      mode: 'prepared',\n      request: prep.request\n    })\n\n    return result\n  },\n\n  async waitForTransaction(opts: ApiTypes.WaitForTransactionOpts) {\n    const receipt = await WagmiCore.waitForTransaction(formatOpts(opts))\n\n    return receipt\n  }\n}\n"],"names":["a","c","s","t","u","f","i","n","e","r","o","d","NAMESPACE","getChainIdReference","chainId","formatOpts","opts","__spreadProps","__spreadValues","avalanche","avalancheFuji","binanceSmartChain","binanceSmartChainTestnet","fantom","fantomTestnet","p","m","l","walletConnectProvider","projectId","jsonRpcProvider","rpcChain","providers","alchemyProvider","infuraProvider","publicProvider","chains","chain","defaultConnectors","appName","connectorChains","WalletConnectConnector","InjectedConnector","CoinbaseWalletConnector","MetaMaskConnector","Buffer","client","getClient","onConnectorChange","event","AccountCtrl","onConnectorMessage","onConnectorError","onClientConnected","_a","_b","_c","_d","_e","_f","account","connector","provider","onClientDisconnected","onClientChange","state","prevState","status","initializeClient","options","configChains","wagmiChain","configProviders","configAutoConnect","configureChains","createClient","g","y","h","w","Web3ModalEthereum","id","item","WagmiCore","CoreHelpers","onUri","getProviderUri","resolve","type","data","wcUri","value","domain","types","message","addressOrName","contractInterface","signerOrProvider","address","formatUnits","callback","remainingOpts","__objRest","avatar","name","prep"],"mappings":"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"}