import type { Connector } from '@wagmi/core';
import { InjectedConnector } from '@wagmi/core';
import { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet';
import { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect';
import type { EthereumClient, FetchEnsAddressOpts, FetchEnsAvatarOpts, FetchEnsNameOpts, FetchTransactionOpts, GetBalanceOpts, GetContractOpts, GetDefaultConnectorsOpts, GetTokenOpts, GetWalletConnectProviderOpts, PrepareSendTransactionOpts, PrepareWriteContractOpts, ReadContractOpts, SignTypedDataOpts, WaitForTransactionOpts, WatchReadContractOpts, WriteContractOpts } from '../types/apiTypes';
export declare const Web3ModalEthereum: {
    walletConnectRpc({ projectId }: GetWalletConnectProviderOpts): import("@wagmi/core").ChainProviderFn<import("@ethersproject/providers").JsonRpcProvider, import("@ethersproject/providers").WebSocketProvider, import("@wagmi/core").Chain>;
    defaultConnectors({ appName, chains }: GetDefaultConnectorsOpts): (WalletConnectConnector | InjectedConnector | CoinbaseWalletConnector)[];
    createClient(wagmiClient: EthereumClient): any;
    getDefaultConnectorChainId(connector: Connector): number;
    getConnectorById(id: 'coinbaseWallet' | 'injected' | 'metaMask' | 'walletConnect'): Connector<any, any, any>;
    disconnect(): Promise<void>;
    connectWalletConnect(onUri: (uri: string) => void): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectLinking(onUri: (uri: string) => void): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectCoinbaseMobile(onUri?: ((uri: string) => void) | undefined): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectCoinbaseExtension(): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectMetaMask(): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    connectInjected(): Promise<import("@wagmi/core").ConnectResult<import("@wagmi/core").Provider>>;
    switchChain(chainId: string): Promise<string>;
    signTypedData({ value, domain, types }: SignTypedDataOpts): Promise<string>;
    signMessage(message: string): Promise<string>;
    fetchBalance(opts: GetBalanceOpts): Promise<string>;
    fetchSigner(): Promise<import("@wagmi/core").FetchSignerResult<import("ethers").Signer>>;
    getNetwork(): import("@wagmi/core").GetNetworkResult;
    getContract({ addressOrName, contractInterface, signerOrProvider }: GetContractOpts): import("ethers").Contract;
    getToken({ address, chainId, formatUnits }: GetTokenOpts): Promise<import("@wagmi/core").FetchTokenResult>;
    readContract(opts: ReadContractOpts): Promise<import("@ethersproject/abi").Result>;
    writeContract(opts: WriteContractOpts): Promise<import("@wagmi/core").SendTransactionResult>;
    prepareWriteContract(opts: PrepareWriteContractOpts): Promise<import("@wagmi/core").PrepareWriteContractResult<import("ethers").Signer>>;
    watchReadContract(opts: WatchReadContractOpts): void;
    fetchEnsAddress(opts: FetchEnsAddressOpts): Promise<string | undefined>;
    fetchEnsAvatar(opts: FetchEnsAvatarOpts): Promise<string | undefined>;
    fetchEnsName(opts: FetchEnsNameOpts): Promise<string | undefined>;
    fetchEnsResolver(opts: FetchEnsAddressOpts): Promise<import("@wagmi/core").FetchEnsResolverResult>;
    fetchTransaction(opts: FetchTransactionOpts): Promise<import("@ethersproject/abstract-provider").TransactionResponse>;
    prepareSendTransaction(opts: PrepareSendTransactionOpts): Promise<import("@wagmi/core").PrepareSendTransactionResult>;
    sendTransaction(opts: PrepareSendTransactionOpts): Promise<import("@wagmi/core").SendTransactionResult>;
    waitForTransaction(opts: WaitForTransactionOpts): Promise<import("@ethersproject/abstract-provider").TransactionReceipt>;
};
