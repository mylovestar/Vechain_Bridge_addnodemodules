{"version":3,"file":"index.js","sources":["../src/utilities.ts","../src/api.ts"],"sourcesContent":["import type { ConnectorData } from '@wagmi/core'\nimport type { State } from '@wagmi/core/dist/declarations/src/client'\nimport { AccountCtrl } from '@web3modal/core'\nimport type { EthereumClient } from '../types/apiTypes'\n\nexport const NAMESPACE = 'eip155'\n\nexport let ethereumClient = undefined as EthereumClient | undefined\n\nfunction onConnectorChange(event: ConnectorData) {\n  if (event.account) AccountCtrl.setAddress(event.account)\n  if (event.chain) AccountCtrl.setChain(`${NAMESPACE}:${event.chain.id}`, !event.chain.unsupported)\n}\n\nfunction onConnectorMessage(event: { type: string; data?: unknown }) {\n  // eslint-disable-next-line no-console\n  console.log(event)\n}\n\nfunction onConnectorError(event: Error) {\n  // eslint-disable-next-line no-console\n  console.log(event)\n}\n\nfunction onClientConnected() {\n  const account = ethereumClient?.data?.account\n  const chain = ethereumClient?.data?.chain\n  const connector = ethereumClient?.connector\n  const provider = ethereumClient?.provider\n  if (account && chain && connector && provider) {\n    connector.on('change', onConnectorChange)\n    connector.on('message', onConnectorMessage)\n    connector.on('error', onConnectorError)\n    AccountCtrl.setAccount({\n      address: account,\n      chainId: `${NAMESPACE}:${chain.id}`,\n      chainSupported: !chain.unsupported,\n      connector: connector.id\n    })\n  }\n}\n\nfunction onClientDisconnected() {\n  ethereumClient?.connector?.removeAllListeners()\n  AccountCtrl.resetAccount()\n}\n\nfunction onClientChange(state: State, prevState: State) {\n  if (state.status !== prevState.status) {\n    const { status } = state\n    if (status === 'connected') onClientConnected()\n    if (status === 'disconnected') onClientDisconnected()\n  }\n}\n\nexport function initClient(wagmiClient: EthereumClient) {\n  ethereumClient = wagmiClient\n  ethereumClient.subscribe(onClientChange)\n}\n\nexport function getChainIdReference(chainId: string): number {\n  if (typeof chainId === 'string' && chainId.includes(':')) {\n    const id = Number(chainId.split(':')[1])\n\n    return id\n  }\n\n  throw new Error('Invalid chainId, should be formated as namespace:id')\n}\n\nexport function formatOpts<T>(opts: T & { chainId: string }): T & { chainId: number } {\n  return {\n    ...opts,\n    chainId: getChainIdReference(opts.chainId)\n  }\n}\n","import type { Connector } from '@wagmi/core'\nimport {\n  connect,\n  disconnect,\n  fetchBalance,\n  fetchEnsAddress,\n  fetchEnsAvatar,\n  fetchEnsName,\n  fetchEnsResolver,\n  fetchSigner,\n  fetchToken,\n  fetchTransaction,\n  getContract,\n  getNetwork,\n  InjectedConnector,\n  prepareSendTransaction,\n  prepareWriteContract,\n  readContract,\n  sendTransaction,\n  signMessage,\n  signTypedData,\n  switchNetwork,\n  waitForTransaction,\n  watchReadContract,\n  writeContract\n} from '@wagmi/core'\nimport { CoinbaseWalletConnector } from '@wagmi/core/connectors/coinbaseWallet'\nimport { MetaMaskConnector } from '@wagmi/core/connectors/metaMask'\nimport { WalletConnectConnector } from '@wagmi/core/connectors/walletConnect'\nimport { jsonRpcProvider } from '@wagmi/core/providers/jsonRpc'\nimport { CoreHelpers } from '@web3modal/core'\nimport type {\n  EthereumClient,\n  FetchEnsAddressOpts,\n  FetchEnsAvatarOpts,\n  FetchEnsNameOpts,\n  FetchTransactionOpts,\n  GetBalanceOpts,\n  GetContractOpts,\n  GetDefaultConnectorsOpts,\n  GetTokenOpts,\n  GetWalletConnectProviderOpts,\n  PrepareSendTransactionOpts,\n  PrepareWriteContractOpts,\n  ReadContractOpts,\n  SignTypedDataOpts,\n  WaitForTransactionOpts,\n  WatchReadContractOpts,\n  WriteContractOpts\n} from '../types/apiTypes'\nimport { ethereumClient, formatOpts, getChainIdReference, initClient, NAMESPACE } from './utilities'\n\nexport const Web3ModalEthereum = {\n  // -- config ------------------------------------------------------- //\n  walletConnectRpc({ projectId }: GetWalletConnectProviderOpts) {\n    return jsonRpcProvider({\n      rpc: chain => ({\n        http: `https://rpc.walletconnect.com/v1/?chainId=${NAMESPACE}:${chain.id}&projectId=${projectId}`\n      })\n    })\n  },\n\n  defaultConnectors({ appName, chains }: GetDefaultConnectorsOpts) {\n    return [\n      new WalletConnectConnector({ chains, options: { qrcode: false } }),\n      new InjectedConnector({ chains, options: { shimDisconnect: true } }),\n      new CoinbaseWalletConnector({ chains, options: { appName, headlessMode: true } }),\n      new MetaMaskConnector({ chains })\n    ]\n  },\n\n  createClient(wagmiClient: EthereumClient) {\n    initClient(wagmiClient)\n\n    // Preheat wc connector\n    const walletConnect = this.getConnectorById('walletConnect')\n    walletConnect.connect()\n\n    return this\n  },\n\n  // -- chains ----------------------------------------------------- //\n  getDefaultConnectorChainId(connector: Connector) {\n    const chainId = connector.chains[0].id\n\n    return chainId\n  },\n\n  // -- connectors ------------------------------------------------- //\n  getConnectorById(id: 'coinbaseWallet' | 'injected' | 'metaMask' | 'walletConnect') {\n    const connector = ethereumClient?.connectors.find(item => item.id === id)\n    if (!connector) throw new Error(`Missing ${id} connector`)\n\n    return connector\n  },\n\n  async disconnect() {\n    await disconnect()\n    CoreHelpers.removeWalletConnectDeepLink()\n  },\n\n  async connectWalletConnect(onUri: (uri: string) => void) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri(provider.connector.uri)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectLinking(onUri: (uri: string) => void) {\n    const connector = this.getConnectorById('walletConnect')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            const wcUri: string = provider.connector.uri\n            onUri(encodeURIComponent(wcUri))\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectCoinbaseMobile(onUri?: (uri: string) => void) {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = this.getDefaultConnectorChainId(connector)\n\n    async function getProviderUri() {\n      return new Promise<void>(resolve => {\n        connector.once('message', async ({ type }) => {\n          if (type === 'connecting') {\n            const provider = await connector.getProvider()\n            onUri?.(provider.qrUrl)\n            resolve()\n          }\n        })\n      })\n    }\n\n    const [data] = await Promise.all([connect({ connector, chainId }), getProviderUri()])\n\n    return data\n  },\n\n  async connectCoinbaseExtension() {\n    const connector = this.getConnectorById('coinbaseWallet')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  },\n\n  async connectMetaMask() {\n    const connector = this.getConnectorById('metaMask')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  },\n\n  async connectInjected() {\n    const connector = this.getConnectorById('injected')\n    const chainId = this.getDefaultConnectorChainId(connector)\n    const data = await connect({ connector, chainId })\n\n    return data\n  },\n\n  // -- actions ----------------------------------------------------- //\n  async switchChain(chainId: string) {\n    const chain = await switchNetwork({ chainId: getChainIdReference(chainId) })\n\n    return `eip155:${chain.id}`\n  },\n\n  async signTypedData({ value, domain, types }: SignTypedDataOpts) {\n    const signature = await signTypedData({ value, domain, types })\n\n    return signature\n  },\n\n  async signMessage(message: string) {\n    const signature = await signMessage({ message })\n\n    return signature\n  },\n\n  // -- fetch ------------------------------------------------------- //\n  async fetchBalance(opts: GetBalanceOpts) {\n    const balance = await fetchBalance(formatOpts(opts))\n\n    return balance.formatted\n  },\n\n  async fetchSigner() {\n    const signer = await fetchSigner()\n\n    return signer\n  },\n\n  getNetwork() {\n    const network = getNetwork()\n\n    return network\n  },\n\n  // ----------- contract ----------------------------- //\n\n  getContract({ addressOrName, contractInterface, signerOrProvider }: GetContractOpts) {\n    const contract = getContract({ addressOrName, contractInterface, signerOrProvider })\n\n    return contract\n  },\n\n  async getToken({ address, chainId, formatUnits }: GetTokenOpts) {\n    const token = await fetchToken({ address, chainId: getChainIdReference(chainId), formatUnits })\n\n    return token\n  },\n\n  async readContract(opts: ReadContractOpts) {\n    const read = await readContract(formatOpts(opts))\n\n    return read\n  },\n\n  async writeContract(opts: WriteContractOpts) {\n    const write = await writeContract(\n      formatOpts({\n        mode: 'prepared',\n        ...opts\n      })\n    )\n\n    return write\n  },\n\n  async prepareWriteContract(opts: PrepareWriteContractOpts) {\n    const preperation = await prepareWriteContract(formatOpts(opts))\n\n    return preperation\n  },\n\n  watchReadContract(opts: WatchReadContractOpts) {\n    const { callback, ...remainingOpts } = opts\n    watchReadContract(formatOpts(remainingOpts), callback)\n  },\n\n  // ----------- ens ----------------------------- //\n\n  async fetchEnsAddress(opts: FetchEnsAddressOpts) {\n    const address = await fetchEnsAddress(formatOpts(opts))\n\n    return address?.toString()\n  },\n\n  async fetchEnsAvatar(opts: FetchEnsAvatarOpts) {\n    const avatar = await fetchEnsAvatar(formatOpts(opts))\n\n    return avatar?.toString()\n  },\n\n  async fetchEnsName(opts: FetchEnsNameOpts) {\n    const name = await fetchEnsName(formatOpts(opts))\n\n    return name?.toString()\n  },\n\n  async fetchEnsResolver(opts: FetchEnsAddressOpts) {\n    const resolver = await fetchEnsResolver(formatOpts(opts))\n\n    return resolver\n  },\n\n  // ----------- transaction ---------------------- //\n\n  async fetchTransaction(opts: FetchTransactionOpts) {\n    const transaction = await fetchTransaction(formatOpts(opts))\n\n    return transaction\n  },\n\n  async prepareSendTransaction(opts: PrepareSendTransactionOpts) {\n    const preparation = await prepareSendTransaction(formatOpts(opts))\n\n    return preparation\n  },\n\n  async sendTransaction(opts: PrepareSendTransactionOpts) {\n    const prep = await prepareSendTransaction(formatOpts(opts))\n    const result = await sendTransaction({\n      mode: 'prepared',\n      request: prep.request\n    })\n\n    return result\n  },\n\n  async waitForTransaction(opts: WaitForTransactionOpts) {\n    const receipt = await waitForTransaction(formatOpts(opts))\n\n    return receipt\n  }\n}\n"],"names":["NAMESPACE","ethereumClient","onConnectorChange","event","AccountCtrl","onConnectorMessage","onConnectorError","onClientConnected","_a","_b","account","chain","connector","provider","onClientDisconnected","onClientChange","state","prevState","status","initClient","wagmiClient","getChainIdReference","chainId","formatOpts","opts","__spreadProps","__spreadValues","Web3ModalEthereum","projectId","jsonRpcProvider","appName","chains","WalletConnectConnector","InjectedConnector","CoinbaseWalletConnector","MetaMaskConnector","id","item","disconnect","CoreHelpers","onUri","getProviderUri","resolve","type","data","connect","wcUri","switchNetwork","value","domain","types","signTypedData","message","signMessage","fetchBalance","fetchSigner","getNetwork","addressOrName","contractInterface","signerOrProvider","getContract","address","formatUnits","fetchToken","readContract","writeContract","prepareWriteContract","callback","remainingOpts","__objRest","watchReadContract","fetchEnsAddress","avatar","fetchEnsAvatar","name","fetchEnsName","fetchEnsResolver","fetchTransaction","prepareSendTransaction","prep","sendTransaction","waitForTransaction"],"mappings":"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"}